@model List<ForumThreadViewModel>
@using System.Security.Claims


@{
    ViewData["Title"] = "Forum";
    var isAdminUser = string.Equals(User?.Identity?.Name, "estavba@gmail.com", StringComparison.OrdinalIgnoreCase);
}

@if (TempData["ErrorMessage"] != null)
{
    <div class="alert alert-danger" role="alert">
        @TempData["ErrorMessage"]
    </div>
}

<style>
    body {
        background-color: #f2f2f2;
        background: url('https://img.freepik.com/premium-photo/white-background-with-white-background-black-text-that-says-white_689904-124037.jpg?w=740') no-repeat center center fixed;
        background-size: cover;
        margin: 0; 
        display: flex;
        flex-direction: column;
        color: #000000; 
    }

    .bin-button {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 55px;
        height: 55px;
        border-radius: 15px;
        background-color: rgb(255, 95, 95);
        cursor: pointer;
        transition-duration: 0.3s;
    }

    .bin-bottom {
        width: 15px;
    }

    .bin-top {
        width: 17px;
        transform-origin: right;
        transition-duration: 0.3s;
    }

    .bin-button:hover .bin-top {
        transform: rotate(45deg);
    }

    .bin-button:hover {
        background-color: rgb(255, 0, 0);
    }

    .bin-button:active {
        transform: scale(0.9);
    }

    .editBtn {
        width: 55px;
        height: 55px;
        border-radius: 20px;
        border: none;
        background-color: rgb(93, 93, 116);
        display: flex;
        align-items: center;
        justify-content: center;
        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.123);
        cursor: pointer;
        position: relative;
        overflow: hidden;
        transition: all 0.3s;
        margin-left: 10px;
    }

        .editBtn::before {
            content: "";
            width: 200%;
            height: 200%;
            background-color: rgb(102, 102, 141);
            position: absolute;
            z-index: 1;
            transform: scale(0);
            transition: all 0.3s;
            border-radius: 50%;
            filter: blur(10px);
        }

        .editBtn:hover::before {
            transform: scale(1);
        }

        .editBtn:hover {
            box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.336);
        }

        .editBtn svg {
            height: 17px;
            fill: white;
            z-index: 3;
            transition: all 0.2s;
            transform-origin: bottom;
        }

        .editBtn:hover svg {
            transform: rotate(-15deg) translateX(5px);
        }

        .editBtn::after {
            content: "";
            width: 25px;
            height: 1.5px;
            position: absolute;
            bottom: 19px;
            left: -5px;
            background-color: white;
            border-radius: 2px;
            z-index: 2;
            transform: scaleX(0);
            transform-origin: left;
            transition: transform 0.5s ease-out;
        }

        .editBtn:hover::after {
            transform: scaleX(1);
            left: 0px;
            transform-origin: right;
        }

    .Btn {
        display: flex;
        align-items: center;
        justify-content: flex-start;
        width: 45px;
        height: 45px;
        border-radius: calc(45px/2);
        border: none;
        cursor: pointer;
        position: relative;
        overflow: hidden;
        transition-duration: .3s;
        box-shadow: 2px 2px 10px rgba(0, 0, 0, 0.199);
        background-color: rgb(16, 137, 211);
    }

    /* plus sign */
    .sign {
        width: 100%;
        font-size: 2.2em;
        color: white;
        transition-duration: .3s;
        display: flex;
        align-items: center;
        justify-content: center;
        margin-bottom: 8px;
    }
    /* text */
    .text {
        position: absolute;
        right: 0%;
        width: 0%;
        opacity: 0;
        color: white;
        font-size: 1.2em;
        font-weight: 500;
        transition-duration: .3s;
        padding-left: 8px;
        padding-right: 10px;
    }
    /* hover effect on button width */
    .Btn:hover {
        width: 125px;
        transition-duration: .3s;
    }

        .Btn:hover .sign {
            width: 30%;
            transition-duration: .3s;
            padding-left: 15px;
        }
        /* hover effect button's text */
        .Btn:hover .text {
            opacity: 1;
            width: 70%;
            transition-duration: .3s;
            padding-right: 15px;
        }
    /* button click effect*/
    .Btn:active {
        transform: translate(2px,2px);
    }

    .heading {
        text-align: center;
        font-weight: 900;
        font-size: 30px;
        color: rgb(16, 137, 211);
    }


       .input {
            width: 100%;
            background: white;
            border: none;
            padding: 15px 20px;
            border-radius: 20px;
            margin-top: 15px;
            box-shadow: #cff0ff 0px 10px 10px -5px;
            border-inline: 2px solid transparent;
        }


            .input::-moz-placeholder {
                color: rgb(170, 170, 170);
            }

            .input::placeholder {
                color: rgb(170, 170, 170);
            }

           .input:focus {
                outline: none;
                border-inline: 2px solid #12B1D1;
            }

    .login-button {
        display: block;
        width: 12.5%;
        font-weight: bold;
        background: linear-gradient(45deg, rgb(16, 137, 211) 0%, rgb(18, 177, 209) 100%);
        color: white;
        padding-block: 15px;
        margin: 20px auto;
        border-radius: 20px;
        box-shadow: rgba(133, 189, 215, 0.8784313725) 0px 20px 10px -15px;
        border: none;
        transition: all 0.2s ease-in-out;
    }

        .login-button:hover {
            transform: scale(1.03);
            box-shadow: rgba(133, 189, 215, 0.8784313725) 0px 23px 10px -20px;
        }

        .login-button:active {
            transform: scale(0.95);
            box-shadow: rgba(133, 189, 215, 0.8784313725) 0px 15px 10px -10px;
        }

    .register-container {
        max-width: 1000px;
        background: #F8F9FD;
        background: linear-gradient(0deg, rgb(255, 255, 255) 0%, rgb(244, 247, 251) 100%);
        border-radius: 40px;
        padding: 25px 35px;
        border: 5px solid rgb(255, 255, 255);
        box-shadow: rgba(133, 189, 215, 0.8784313725) 0px 30px 30px -20px;
        margin: 20px auto;
    }

    .heading {
        text-align: center;
        font-weight: 900;
        font-size: 30px;
        color: rgb(16, 137, 211);
    }

    .heading2 {
        text-align: center;
        font-weight: 900;
        font-size: 20px;
        color: rgb(16, 137, 211);
    }

    .form {
        margin-top: 20px;
    }

        .form .input {
            width: 100%;
            background: white;
            border: none;
            padding: 15px 20px;
            border-radius: 20px;
            margin-top: 15px;
            box-shadow: #cff0ff 0px 10px 10px -5px;
            border-inline: 2px solid transparent;
        }

            .form .input::-moz-placeholder {
                color: rgb(170, 170, 170);
            }

            .form .input::placeholder {
                color: rgb(170, 170, 170);
            }

            .form .input:focus {
                outline: none;
                border-inline: 2px solid #12B1D1;
            }

        .form .forgot-password {
            display: block;
            margin-top: 10px;
        }

            .form .forgot-password a {
                font-size: 11px;
                color: #0099ff;
                text-decoration: none;
            }

        .form .login-button {
            display: block;
            width: 100%;
            font-weight: bold;
            background: linear-gradient(45deg, rgb(16, 137, 211) 0%, rgb(18, 177, 209) 100%);
            color: white;
            padding-block: 15px;
            margin: 20px auto;
            border-radius: 20px;
            box-shadow: rgba(133, 189, 215, 0.8784313725) 0px 20px 10px -15px;
            border: none;
            transition: all 0.2s ease-in-out;
        }

            .form .login-button:hover {
                transform: scale(1.03);
                box-shadow: rgba(133, 189, 215, 0.8784313725) 0px 23px 10px -20px;
            }

            .form .login-button:active {
                transform: scale(0.95);
                box-shadow: rgba(133, 189, 215, 0.8784313725) 0px 15px 10px -10px;
            }

        .form .form-check {
            display: flex;
            align-items: center;
            justify-content: flex-start;
            margin-top: 20px; /* Adjust as needed */
        }

            .form .form-check input[type="checkbox"] {
                margin-right: 5px; /* Adjust as needed */
            }

    .btn-container {
        position: absolute;
        top: 0;
        right: 0;
        display: flex; /* Use flexbox */
        align-items: center; /* Center items vertically */
    }

    .editBtn,
    .bin-button {
        margin-left: 10px; /* Adjust as needed */
    }

</style>



<h2 style="text-align: center;" class="heading">Forum Threads</h2>

<div style="display: flex; justify-content: center; align-items: center;">
    <button asp-action="Create" onclick="location.href='@Url.Action("Create", "KPostThread")'" class="Btn">
    <div class="sign">+</div>
    <div class="text">Create</div>
</button>
</div>
<br /><br />

@foreach (var thread in Model)
{
    <div class="register-container" style="margin-bottom: 2cm; position: relative;">
        <div>
            <div class="btn-container">
                @if (User.Identity.IsAuthenticated && User.FindFirstValue(ClaimTypes.NameIdentifier) == thread.Thread.UserId)
                {
                    <a asp-action="Edit" class="editBtn" style="margin-top: 20px;" asp-route-id="@thread.Thread.Id">
                        <svg height="1em" viewBox="0 0 512 512">
                            <path d="M410.3 231l11.3-11.3-33.9-33.9-62.1-62.1L291.7 89.8l-11.3 11.3-22.6 22.6L58.6 322.9c-10.4 10.4-18 23.3-22.2 37.4L1 480.7c-2.5 8.4-.2 17.5 6.1 23.7s15.3 8.5 23.7 6.1l120.3-35.4c14.1-4.2 27-11.8 37.4-22.2L387.7 253.7 410.3 231zM160 399.4l-9.1 22.7c-4 3.1-8.5 5.4-13.3 6.9L59.4 452l23-78.1c1.4-4.9 3.8-9.4 6.9-13.3l22.7-9.1v32c0 8.8 7.2 16 16 16h32zM362.7 18.7L348.3 33.2 325.7 55.8 314.3 67.1l33.9 33.9 62.1 62.1 33.9 33.9 11.3-11.3 22.6-22.6 14.5-14.5c25-25 25-65.5 0-90.5L453.3 18.7c-25-25-65.5-25-90.5 0zm-47.4 168l-144 144c-6.2 6.2-16.4 6.2-22.6 0s-6.2-16.4 0-22.6l144-144c6.2-6.2 16.4-6.2 22.6 0s6.2 16.4 0 22.6z"></path>
                        </svg>
                    </a>
                }
                @if (User.Identity.IsAuthenticated && User.FindFirstValue(ClaimTypes.NameIdentifier) == thread.Thread.UserId || isAdminUser)
                {
                    <a asp-action="Delete" class="bin-button" style="margin-right: 20px; margin-top: 20px;" asp-route-id="@thread.Thread.Id">
                        <svg class="bin-top"
                             viewBox="0 0 39 7"
                             fill="none"
                             xmlns="http://www.w3.org/2000/svg">
                            <line y1="5" x2="39" y2="5" stroke="white" stroke-width="4"></line>
                            <line x1="12"
                                  y1="1.5"
                                  x2="26.0357"
                                  y2="1.5"
                                  stroke="white"
                                  stroke-width="3"></line>
                        </svg>
                        <svg class="bin-bottom"
                             viewBox="0 0 33 39"
                             fill="none"
                             xmlns="http://www.w3.org/2000/svg">
                            <mask id="path-1-inside-1_8_19" fill="white">
                                <path d="M0 0H33V35C33 37.2091 31.2091 39 29 39H4C1.79086 39 0 37.2091 0 35V0Z"></path>
                            </mask>
                            <path d="M0 0H33H0ZM37 35C37 39.4183 33.4183 43 29 43H4C-0.418278 43 -4 39.4183 -4 35H4H29H37ZM4 43C-0.418278 43 -4 39.4183 -4 35V0H4V35V43ZM37 0V35C37 39.4183 33.4183 43 29 43V35V0H37Z"
                                  fill="white"
                                  mask="url(#path-1-inside-1_8_19)"></path>
                            <path d="M12 6L12 29" stroke="white" stroke-width="4"></path>
                            <path d="M21 6V29" stroke="white" stroke-width="4"></path>
                        </svg>
                    </a>
                }
            </div>
            <h3>@thread.Thread.Title</h3><br>
            <p>@thread.Thread.Content</p>
            <p>Created at: @thread.Thread.CreatedAt.ToString("MMMM dd, yyyy")</p>
            <ul>
                @foreach (var reply in thread.Replies)
                {
                    <li>@reply.Content - @reply.CreatedAt.ToString("MMMM dd, yyyy")</li>
                }
            </ul>
        </div>
        <form asp-action="Reply" asp-controller="KPostThread" method="post" style="margin-top: 10px;">
            <input type="hidden" asp-for="@thread.Thread.Id" name="threadId" />
            <div class="form-floating" style="display: flex;">
                <textarea id="replyContent" style="resize: none;" name="replyContent" rows="1" class="input" aria-required="true" placeholder="Enter your reply here:"></textarea>
                <button type="submit" class="login-button" style="margin-left: 20px;">Reply</button>
            </div>
        </form>
    </div>
    <hr />
}


<script>
    document.addEventListener('DOMContentLoaded', function () {
        var toggleButtons = document.querySelectorAll('.toggle-replies-btn');

        toggleButtons.forEach(function (btn) {
            btn.addEventListener('click', function () {
                var repliesSection = this.nextElementSibling;
                repliesSection.style.display = (repliesSection.style.display === 'none') ? 'block' : 'none';
            });
        });

        var replyForms = document.querySelectorAll('.reply-form');

        replyForms.forEach(function (form) {
            form.addEventListener('submit', function (e) {
                e.preventDefault();

                var formData = new FormData(form);

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.text())
                    .then(data => {
                        var repliesSection = form.nextElementSibling;
                        repliesSection.innerHTML = data;
                        repliesSection.style.display = 'block';
                    });
            });
        });

        var editForms = document.querySelectorAll('.edit-form');

        editForms.forEach(function (form) {
            form.addEventListener('submit', function (e) {
                e.preventDefault();

                var formData = new FormData(form);

                fetch(form.action, {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.text())
                    .then(data => {
                        location.reload();
                    });
            });
        });
    });
</script>
